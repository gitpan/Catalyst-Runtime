# Known Bugs:

   - Bug ->go or ->visit causes actions which have Args or CaptureArgs called
     twice when called via ->go or ->visit.

     Test app: http://github.com/bobtfish/catalyst-app-bug-go_chain/tree/master

# Compatibility warnings to add:

  - $self->config should warn as config should only ever be called as a
    class method (TESTS).

# Proposed functionality / feature additions:

## Log setup needs to be less lame

So Catalyst::Plugin::Log::* can die
in a fire. Having $c->log_class would be a good start. kane volunteered
to do some of this.

Simple example: Catalyst::Plugin::Log::Colorful should just be a
subclass of Catalyst::Log, no ::Plugin:: needed.

See also: Catalyst::Plugin::Log::Dispatch and
http://github.com/willert/catalyst-plugin-log4perl-simple/tree

# REFACTORING

##  PSGI

###  Blockers

  * lighttpd
  * iis6
  * Add some tests for Catalyst::Test::local_request
  * Test all the options work on all of the scripts
  * Test (and fix if needed) ::Wx
  * Document how to use your own .psgi (and how you need to do ReverseProxy yourself if you do)
  * Document migration for setting engine in setup
  * Document migration for setting engine in $ENV
  * Fix Catalyst::Engine::PSGI .psgi script and in app root running tests.

###  Nice to have

  * Do we need to do something else about middleware than let the user provide a .psgi?
    What about the reverse proxy middleware
  * Do we generate a .psgi by default?
  * throw out Catalyst::Test's remote_request in favour of
    Plack::Test::ExternalServer
  * make sure we're running under a server that support psgi.streaming - maybe
    just load the BufferedWrite middleware, although that might break things
    relying on ->write doing an unbuffered write
  * throw away the restarter and allow using the restarters Plack provides
  * remove per-request state from the engine instance
  * be smarter about how we use PSGI - not every response needs to be delayed
    and streaming

##  The horrible hack for plugin setup - replacing it:

 * Have a look at the Devel::REPL BEFORE_PLUGIN stuff
   I wonder if what we need is that combined with plugins-as-roles

## App / ctx split:

  NOTE - these are notes that t0m thought up after doing back compat for
         catalyst_component_class, may be inaccurate, wrong or missing things
         bug mst (at least) to correct before trying more than the first 2
         steps. Please knock yourself out on the first two however :)

  - Eliminate actions in MyApp from the main test suite
  - Uncomment warning in C::C::register_action_methods, add tests it works
    by mocking out the logging..
  - Remove MyApp @ISA controller (ask metaclass if it has attributes, and if
                                  so you need back compat :/)
  - Make Catalyst::Context, move the per request stuff in there, handles from
    main app class to delegate
  - Make an instance of the app class which is a global variable
  - Make new instance of the context class, not the app class per-request
  - Remove the components as class data, move to instance data on the app
    class (you probably have to do this for _all_ the class data, good luck!)
  - Make it possible for users to spin up different instances of the app class
    (with different config etc each)
  - Profit! (Things like changing the complete app config per vhost, i.e.
    writing a config loader / app class role which dispatches per vhost to
    differently configured apps is piss easy)
