***************
*** 158,178 ****
      return $action, \@args;
  }
  
- =head2 $self->go( $c, $command [, \@arguments ] )
  
  Documented in L<Catalyst>
  
  =cut
  
- sub go {
      my $self = shift;
      my ( $c, $command ) = @_;
      my ( $action, $args ) = $self->_command2action(@_);
  
-     unless ($action && defined $action->namespace) {
-         my $error =
-             qq/Couldn't go to command "$command": /
-           . qq/Invalid action or component./;
          $c->error($error);
          $c->log->debug($error) if $c->debug;
          return 0;
--- 158,197 ----
      return $action, \@args;
  }
  
+ =head2 $self->visit( $c, $command [, \@arguments ] )
  
  Documented in L<Catalyst>
  
  =cut
  
+ sub visit {
      my $self = shift;
+     $self->_do_visit(@_, 'visit');
+ }
+ 
+ sub _do_visit {
+     my $self = shift;
+     my $opname = pop;
      my ( $c, $command ) = @_;
      my ( $action, $args ) = $self->_command2action(@_);
+     my $error = qq/Couldn't $opname("$command"): /;
  
+     if (!$action) {
+         $error .= qq/Invalid action or component./;
+     }
+     elsif (!defined $action->namespace) {
+         $error .= qq/Action has no namespace: cannot $opname() to a plain /
+                  .qq/method or component, must be a :Action or some sort./
+     }
+     elsif (!$action->class->can('_DISPATCH')) {
+         $error .= qq/Action cannot _DISPATCH. /
+                  .qq/Did you try to $opname() a non-controller action?/;
+     }
+     else {
+         $error = q();
+     }
+ 
+     if($error) {
          $c->error($error);
          $c->log->debug($error) if $c->debug;
          return 0;
***************
*** 181,190 ****
      $action = $self->expand_action($action);
  
      local $c->request->{arguments} = $args;
-     $c->namespace($action->namespace);
-     $c->action($action);
      $self->dispatch($c);
  
      die $Catalyst::GO;
  }
  
--- 200,220 ----
      $action = $self->expand_action($action);
  
      local $c->request->{arguments} = $args;
+     local $c->{namespace} = $action->{'namespace'};
+     local $c->{action} = $action;
+ 
      $self->dispatch($c);
+ }
  
+ =head2 $self->go( $c, $command [, \@arguments ] )
+ 
+ Documented in L<Catalyst>
+ 
+ =cut
+ 
+ sub go {
+     my $self = shift;
+     $self->_do_visit(@_, 'go');
      die $Catalyst::GO;
  }
  
